package config

import (
	"fmt"
	"log"
	"time"

	"github.com/google/uuid"
	"github.com/luispfcanales/api-muac/internal/core/domain"
	"golang.org/x/crypto/bcrypt"
	"gorm.io/gorm"
)

// SeedDatabase inserta datos iniciales basados en est√°ndares OMS/UNICEF/Sphere Handbook
func SeedDatabase(db *gorm.DB) error {
	log.Println("üå± Iniciando siembra de datos para Sistema MUAC (OMS/UNICEF/Sphere)")

	// Verificar si ya existen datos
	var roleCount int64
	if err := db.Model(&domain.Role{}).Count(&roleCount).Error; err != nil {
		return fmt.Errorf("error verificando roles existentes: %w", err)
	}

	if roleCount > 0 {
		log.Println("üìã Roles existentes detectados, verificando datos complementarios...")
		return seedAdditionalData(db)
	}

	// Iniciar transacci√≥n
	tx := db.Begin()
	if tx.Error != nil {
		return fmt.Errorf("error iniciando transacci√≥n: %w", tx.Error)
	}

	defer func() {
		if r := recover(); r != nil {
			tx.Rollback()
			log.Printf("Transacci√≥n revertida debido a panic: %v", r)
		}
	}()

	// Sembrar datos completos
	if err := seedRoles(tx); err != nil {
		tx.Rollback()
		return fmt.Errorf("error sembrando roles: %w", err)
	}

	if err := seedTags(tx); err != nil {
		tx.Rollback()
		return fmt.Errorf("error sembrando tags: %w", err)
	}

	if err := seedRecommendations(tx); err != nil {
		tx.Rollback()
		return fmt.Errorf("error sembrando recomendaciones: %w", err)
	}

	if err := seedAdminUser(tx); err != nil {
		tx.Rollback()
		return fmt.Errorf("error creando usuario admin: %w", err)
	}

	if err := seedFAQs(tx); err != nil {
		tx.Rollback()
		return fmt.Errorf("error creando FAQs: %w", err)
	}

	// Confirmar transacci√≥n
	if err := tx.Commit().Error; err != nil {
		return fmt.Errorf("error confirmando transacci√≥n: %w", err)
	}

	logSeedingSummary(db)
	return nil
}

// ============= FUNCIONES DE SIEMBRA ESPEC√çFICAS =============

// seedRoles crea los roles del sistema MUAC
func seedRoles(tx *gorm.DB) error {
	log.Println("üë• Creando roles del sistema...")

	roles := []domain.Role{
		{
			ID:          uuid.New(),
			Name:        "ADMINISTRADOR",
			Description: "Acceso completo al sistema MUAC - Gesti√≥n de usuarios, configuraci√≥n y reportes",
			CreatedAt:   time.Now(),
		},
		{
			ID:          uuid.New(),
			Name:        "SUPERVISOR",
			Description: "Supervisi√≥n de apoderados, an√°lisis de mediciones y reportes regionales",
			CreatedAt:   time.Now(),
		},
		{
			ID:          uuid.New(),
			Name:        "APODERADO",
			Description: "Registro de mediciones MUAC de pacientes asignados en campo",
			CreatedAt:   time.Now(),
		},
	}

	if err := tx.Create(&roles).Error; err != nil {
		return fmt.Errorf("error creando roles: %w", err)
	}

	log.Printf("‚úÖ %d roles creados exitosamente", len(roles))
	return nil
}

// seedTags crea los tags MUAC seg√∫n est√°ndares oficiales
func seedTags(tx *gorm.DB) error {
	log.Println("üè∑Ô∏è  Creando tags de clasificaci√≥n MUAC...")

	tags := []domain.Tag{
		{
			ID:          uuid.New(),
			Name:        "MUAC-R1",
			Description: fmt.Sprintf("Alerta Roja - Desnutrici√≥n aguda severa (SAM) - < %.1f cm", domain.MuacThresholdSevere),
			Color:       domain.ColorRed,
			Active:      true,
			MuacCode:    domain.MuacCodeRed,
			Priority:    domain.PriorityExtreme,
			CreatedAt:   time.Now(),
			UpdatedAt:   time.Now(),
		},
		{
			ID:          uuid.New(),
			Name:        "MUAC-Y1",
			Description: fmt.Sprintf("Alerta Amarilla - Desnutrici√≥n aguda moderada (MAM) - %.1f-%.1f cm", domain.MuacThresholdSevere, domain.MuacThresholdModerate),
			Color:       domain.ColorYellow,
			Active:      true,
			MuacCode:    domain.MuacCodeYellow,
			Priority:    domain.PriorityHigh,
			CreatedAt:   time.Now(),
			UpdatedAt:   time.Now(),
		},
		{
			ID:          uuid.New(),
			Name:        "MUAC-G1",
			Description: fmt.Sprintf("Zona Verde - Estado nutricional adecuado - ‚â• %.1f cm", domain.MuacThresholdNormal),
			Color:       domain.ColorGreen,
			Active:      true,
			MuacCode:    domain.MuacCodeGreen,
			Priority:    domain.PriorityLow,
			CreatedAt:   time.Now(),
			UpdatedAt:   time.Now(),
		},
		{
			ID:          uuid.New(),
			Name:        "SEGUIMIENTO",
			Description: "Paciente en seguimiento post-intervenci√≥n nutricional",
			Color:       domain.ColorBlue,
			Active:      true,
			MuacCode:    domain.MuacCodeFollow,
			Priority:    domain.PriorityMedium,
			CreatedAt:   time.Now(),
			UpdatedAt:   time.Now(),
		},
	}

	if err := tx.Create(&tags).Error; err != nil {
		return fmt.Errorf("error creando tags: %w", err)
	}

	log.Printf("‚úÖ %d tags MUAC oficiales creados", len(tags))
	return nil
}

// seedRecommendations crea las recomendaciones nutricionales contextualizadas
func seedRecommendations(tx *gorm.DB) error {
	log.Println("üí° Creando recomendaciones nutricionales para comunidades amaz√≥nicas...")

	// Valores seg√∫n est√°ndares OMS/UNICEF
	valorSevere := domain.MuacThresholdSevere
	valorModerate := domain.MuacThresholdModerate
	valorNormal := domain.MuacThresholdNormal

	recommendations := []domain.Recommendation{
		{
			ID:   uuid.New(),
			Name: "üö® ALERTA ROJA - Acci√≥n Urgente Requerida",
			Description: "‚ö†Ô∏è Esta medici√≥n indica DESNUTRICI√ìN AGUDA SEVERA (SAM). Tu ni√±o o ni√±a necesita atenci√≥n m√©dica URGENTE. No es tu culpa, pero s√≠ es momento de actuar r√°pido.\n\n" +
				"ACCIONES INMEDIATAS:\n" +
				"1. üè• Acude HOY MISMO al establecimiento de salud m√°s cercano\n" +
				"2. üö´ No retrases la consulta, incluso si el ni√±o parece estar bien\n" +
				"3. üíß Mientras te trasladas: mant√©n hidratado con agua hervida, mates suaves\n" +
				"4. üçå Ofrece alimentos f√°ciles: pl√°tano sancochado, pur√© de yuca, mazamorra\n" +
				"5. üìû Si no puedes movilizarte: contacta al agente comunitario de salud\n" +
				"6. üîÑ Repite medici√≥n solo DESPU√âS de consulta m√©dica\n\n" +
				"‚ö†Ô∏è Este resultado no sustituye diagn√≥stico m√©dico. Es una herramienta de alerta familiar.",
			RecommendationUmbral: fmt.Sprintf("< %.1f cm", valorSevere),
			MinValue:             nil,
			MaxValue:             &valorSevere,
			Priority:             domain.PriorityUrgent,
			Active:               true,
			ColorCode:            domain.ColorRed,
			MuacCode:             domain.MuacCodeRed,
			CreatedAt:            time.Now(),
			UpdatedAt:            time.Now(),
		},
		{
			ID:   uuid.New(),
			Name: "üü° ALERTA AMARILLA - Zona de Riesgo Nutricional",
			Description: "üü° Tu ni√±o o ni√±a est√° en RIESGO NUTRICIONAL (MAM). No es emergencia, pero es una se√±al importante. Es momento de fortalecer su alimentaci√≥n.\n\n" +
				"ACCIONES RECOMENDADAS:\n" +
				"1. üè• Solicita evaluaci√≥n en centro de salud en los pr√≥ximos 5 d√≠as\n" +
				"2. üç≥ Mejora alimentaci√≥n con productos locales:\n" +
				"   ‚Ä¢ Prote√≠nas: huevos, pescado regional, sangrecita\n" +
				"   ‚Ä¢ Frutas amaz√≥nicas: camu camu, aguaje, cocona\n" +
				"   ‚Ä¢ Energ√≠a: pl√°tano, quinua, lenteja, man√≠, ma√≠z tierno\n" +
				"3. üçΩÔ∏è Aumenta frecuencia a 4-5 comidas diarias\n" +
				"4. üö´ Evita ultraprocesados (galletas, gaseosas, embutidos)\n" +
				"5. üìÖ Nuevo control MUAC en 7 d√≠as\n" +
				"6. üå°Ô∏è Si hay fiebre, diarrea o p√©rdida de apetito: acude antes\n\n" +
				"üí™ Con amor, buena comida y atenci√≥n, tu ni√±o/a puede recuperarse.",
			RecommendationUmbral: fmt.Sprintf("%.1f - %.1f cm", valorSevere, valorModerate),
			MinValue:             &valorSevere,
			MaxValue:             &valorModerate,
			Priority:             domain.PriorityAttention,
			Active:               true,
			ColorCode:            domain.ColorYellow,
			MuacCode:             domain.MuacCodeYellow,
			CreatedAt:            time.Now(),
			UpdatedAt:            time.Now(),
		},
		{
			ID:   uuid.New(),
			Name: "‚úÖ ZONA VERDE - Estado Nutricional Adecuado",
			Description: "‚úÖ ¬°Excelente! Tu ni√±o o ni√±a tiene BUEN ESTADO NUTRICIONAL. Sigue aliment√°ndolo con cari√±o y atenci√≥n para que contin√∫e creciendo fuerte y sano.\n\n" +
				"ACCIONES PARA MANTENER LA SALUD:\n" +
				"1. ü•ó Mant√©n alimentaci√≥n balanceada con productos locales:\n" +
				"   ‚Ä¢ Frutas amaz√≥nicas: copoaz√∫, pi√±a, camu camu\n" +
				"   ‚Ä¢ Prote√≠nas: pescado, huevos, frejoles, h√≠gado\n" +
				"   ‚Ä¢ Energ√≠a: yuca, pl√°tano, arroz, ma√≠z\n" +
				"   ‚Ä¢ Hierro/Vitamina A: sangrecita, zanahoria, sacha culantro\n" +
				"2. üìÖ Controles CRED seg√∫n edad (cada 2-3 meses)\n" +
				"3. üìè Medici√≥n MUAC mensual o si baja el apetito\n" +
				"4. ü§ù Comparte esta herramienta con otras familias\n\n" +
				"üéâ ¬°Felicitaciones por cuidar tan bien a tu ni√±o/a!",
			RecommendationUmbral: fmt.Sprintf("‚â• %.1f cm", valorNormal),
			MinValue:             &valorNormal,
			MaxValue:             nil,
			Priority:             domain.PriorityNormal,
			Active:               true,
			ColorCode:            domain.ColorGreen,
			MuacCode:             domain.MuacCodeGreen,
			CreatedAt:            time.Now(),
			UpdatedAt:            time.Now(),
		},
		{
			ID:   uuid.New(),
			Name: "üìã Seguimiento Post-Intervenci√≥n",
			Description: "üìã Paciente en proceso de RECUPERACI√ìN NUTRICIONAL. Mantener cuidados especiales y seguimiento m√©dico.\n\n" +
				"PROTOCOLO DE SEGUIMIENTO:\n" +
				"1. üíä Continuar plan alimentario establecido por el centro de salud\n" +
				"2. üìÖ Controles semanales obligatorios\n" +
				"3. ‚öñÔ∏è Monitoreo de peso y talla regularmente\n" +
				"4. üë®‚Äçüë©‚Äçüëß‚Äçüë¶ Apoyo psicosocial a la familia\n" +
				"5. üì± Registro diario de alimentos consumidos\n" +
				"6. üö® Alerta inmediata si empeoran s√≠ntomas\n\n" +
				"‚è∞ El seguimiento constante es clave para la recuperaci√≥n completa.",
			RecommendationUmbral: "Todas las mediciones",
			MinValue:             nil,
			MaxValue:             nil,
			Priority:             domain.PriorityAttention,
			Active:               true,
			ColorCode:            domain.ColorBlue,
			MuacCode:             domain.MuacCodeFollow,
			CreatedAt:            time.Now(),
			UpdatedAt:            time.Now(),
		},
	}

	if err := tx.Create(&recommendations).Error; err != nil {
		return fmt.Errorf("error creando recomendaciones: %w", err)
	}

	log.Printf("‚úÖ %d recomendaciones contextualizadas creadas", len(recommendations))
	return nil
}

// seedAdminUser crea el usuario administrador inicial
func seedAdminUser(tx *gorm.DB) error {
	log.Println("üë§ Creando usuario administrador inicial...")

	// Obtener rol de administrador
	var adminRole domain.Role
	if err := tx.Where("name = ?", "ADMINISTRADOR").First(&adminRole).Error; err != nil {
		return fmt.Errorf("rol administrador no encontrado: %w", err)
	}

	// Hashear contrase√±a
	password := "admin123"
	hashedPassword, err := bcrypt.GenerateFromPassword([]byte(password), bcrypt.DefaultCost)
	if err != nil {
		return fmt.Errorf("error hasheando contrase√±a: %w", err)
	}

	adminUser := domain.User{
		ID:           uuid.New(),
		Name:         "ADMINISTRADOR",
		LastName:     "Sistema MUAC",
		Username:     "admin",
		Email:        "admin@muac.org",
		DNI:          "00000000",
		Phone:        "999000000",
		PasswordHash: string(hashedPassword),
		Active:       true,
		RoleID:       adminRole.ID,
		CreatedAt:    time.Now(),
	}

	if err := tx.Create(&adminUser).Error; err != nil {
		return fmt.Errorf("error creando usuario admin: %w", err)
	}

	log.Println("‚úÖ Usuario administrador creado exitosamente")
	return nil
}

// seedFAQs crea las preguntas frecuentes iniciales del sistema
func seedFAQs(tx *gorm.DB) error {
	log.Println("‚ùì Creando preguntas frecuentes (FAQs)...")

	faqs := []domain.FAQ{
		// SOBRE EL USO DE LA CINTA Y EL APP
		{
			Question: "¬øQu√© significa la medida que ingreso en la app?",
			Answer:   "La medida que ingresas es la circunferencia del brazo de tu ni√±o o ni√±a, en cent√≠metros. Esta medida nos ayuda a saber si est√° en buen estado nutricional o si necesita atenci√≥n m√©dica.",
			Category: domain.FAQCategoryTapeAndApp,
		},
		{
			Question: "¬øC√≥mo s√© si us√© bien la cinta MUAC?",
			Answer:   "La cinta debe colocarse a la mitad del brazo izquierdo del ni√±o, entre el hombro y el codo. No debe estar ni muy floja ni muy apretada. El n√∫mero que se muestra en la ventana es el que debes ingresar en la app. Puedes repetir la medici√≥n si no est√°s seguro.",
			Category: domain.FAQCategoryTapeAndApp,
		},
		{
			Question: "¬øPuedo usar la cinta con ropa puesta?",
			Answer:   "No. Para que la medici√≥n sea correcta, el brazo del ni√±o/a debe estar sin ropa (manga arremangada o brazo desnudo). La ropa puede alterar el resultado.",
			Category: domain.FAQCategoryTapeAndApp,
		},

		// SOBRE EL FUNCIONAMIENTO DEL APLICATIVO
		{
			Question: "¬øNecesito tener internet para usar el app?",
			Answer:   "No. El aplicativo est√° dise√±ado para funcionar sin conexi√≥n a internet. Solo necesitas tener cargado el tel√©fono. Algunas funciones como el mapa de centros de salud pueden necesitar GPS o conexi√≥n si no est√°n precargadas.",
			Category: domain.FAQCategoryAppInfo,
		},
		{
			Question: "¬øPuedo usar el app con cualquier ni√±o/a?",
			Answer:   "S√≠, siempre que tenga entre 6 y 59 meses (de 0.5 a 5 a√±os de edad). No se recomienda para beb√©s menores de 6 meses ni para ni√±os mayores de 5 a√±os.",
			Category: domain.FAQCategoryAppInfo,
		},

		{
			Question: "¬øQu√© pasa si me equivoco al ingresar el n√∫mero?",
			Answer:   "Puedes volver atr√°s y corregir la medici√≥n. El app solo guarda la √∫ltima medici√≥n ingresada, as√≠ que puedes repetirla si es necesario.",
			Category: domain.FAQCategoryAppInfo,
		},

		// SOBRE LOS RESULTADOS Y LO QUE DEBO HACER
		{
			Question: "¬øQu√© significa si aparece Alerta Roja?",
			Answer:   "Significa que tu ni√±o/a podr√≠a estar con desnutrici√≥n severa. Es muy importante que lo lleves al centro de salud lo antes posible, aunque parezca que est√° bien. La desnutrici√≥n no siempre se nota de inmediato.",
			Category: domain.FAQCategoryResults,
		},
		{
			Question: "¬øY si me sale Alerta Amarilla?",
			Answer:   "Significa que hay riesgo de desnutrici√≥n. No es una emergencia, pero s√≠ una se√±al de cuidado. Revisa su alimentaci√≥n, y ll√©valo al centro de salud para un chequeo. Puedes volver a medir en 7 d√≠as.",
			Category: domain.FAQCategoryResults,
		},
		{
			Question: "¬øY si sale Zona Verde? ¬øTodo est√° bien?",
			Answer:   "S√≠, es una buena se√±al. Pero igual debes seguir con sus controles en el centro de salud y alimentarlo bien. Puedes repetir la medici√≥n una vez al mes o si lo ves enfermo o sin apetito.",
			Category: domain.FAQCategoryResults,
		},

		// SOBRE LOS CENTROS DE SALUD Y EL APOYO LOCAL
		{
			Question: "¬øC√≥mo encuentro el centro de salud m√°s cercano?",
			Answer:   "El app puede mostrarte un listado o un mapa, usando GPS si est√° disponible. Si no tienes conexi√≥n, ver√°s una lista precargada con los puestos m√°s cercanos seg√∫n tu comunidad.",
			Category: domain.FAQCategoryHealthCenters,
		},
		{
			Question: "¬øQu√© hago si no puedo ir al centro de salud?",
			Answer:   "Busca apoyo del teniente gobernador, promotor de salud o el centro poblado. Ellos pueden ayudarte a comunicarte o trasladarte.",
			Category: domain.FAQCategoryHealthCenters,
		},
		{
			Question: "¬øPuedo usar esta app para otros ni√±os de la comunidad?",
			Answer:   "S√≠. Puedes usar la cinta y la app con cualquier ni√±o de entre 6 y 59 meses. Solo aseg√∫rate de no confundir las mediciones si lo haces con varios.",
			Category: domain.FAQCategoryHealthCenters,
		},

		// SOBRE PRIVACIDAD Y SEGURIDAD
		{
			Question: "¬øEl app guarda informaci√≥n personal del ni√±o/a?",
			Answer:   "No. El aplicativo no registra nombres, fotos ni datos personales. Solo guarda las mediciones y los resultados para que puedas consultarlos t√∫ mismo.",
			Category: domain.FAQCategoryPrivacy,
		},
		{
			Question: "¬øQui√©n puede ver los datos que ingreso?",
			Answer:   "Solo t√∫. Nadie m√°s tiene acceso a tu tel√©fono ni a lo que registres. Si en el futuro deseas compartir la informaci√≥n con el centro de salud, puedes mostrarla desde tu pantalla.",
			Category: domain.FAQCategoryPrivacy,
		},

		// OTRAS PREGUNTAS
		{
			Question: "¬øEste app reemplaza al personal de salud?",
			Answer:   "No. El app es una herramienta de apoyo para el cuidado en casa, pero no reemplaza al centro de salud ni a los profesionales. Siempre debes acudir si tienes dudas o si el ni√±o/a est√° enfermo.",
			Category: domain.FAQCategoryOther,
		},
		{
			Question: "¬øPuedo hacer una nueva medici√≥n el mismo d√≠a?",
			Answer:   "S√≠. Si crees que te equivocaste o si el ni√±o/a comi√≥ y crees que cambi√≥, puedes repetir la medici√≥n. Lo importante es hacerlo siempre en el mismo brazo y bien colocado.",
			Category: domain.FAQCategoryOther,
		},
	}

	// Crear FAQs con IDs generados
	for i := range faqs {
		faqs[i].ID = uuid.New()
		faqs[i].CreatedAt = time.Now()
	}

	if err := tx.Create(&faqs).Error; err != nil {
		return fmt.Errorf("error creando FAQs: %w", err)
	}

	log.Printf("‚úÖ %d preguntas frecuentes creadas en %d categor√≠as", len(faqs), len(domain.ValidFAQCategories))
	return nil
}

// ============= FUNCIONES DE DATOS ADICIONALES =============

// seedAdditionalData agrega datos faltantes si los roles ya existen
func seedAdditionalData(db *gorm.DB) error {
	log.Println("üîç Verificando y completando datos del sistema...")

	if err := checkAndCreateTags(db); err != nil {
		return fmt.Errorf("error verificando tags: %w", err)
	}

	if err := checkAndCreateRecommendations(db); err != nil {
		return fmt.Errorf("error verificando recomendaciones: %w", err)
	}

	if err := checkAndCreateFAQs(db); err != nil {
		return fmt.Errorf("error verificando FAQs: %w", err)
	}

	if err := updateExistingData(db); err != nil {
		return fmt.Errorf("error actualizando datos existentes: %w", err)
	}

	log.Println("‚úÖ Verificaci√≥n de datos completada")
	return nil
}

func checkAndCreateFAQs(db *gorm.DB) error {
	var faqCount int64
	if err := db.Model(&domain.FAQ{}).Count(&faqCount).Error; err != nil {
		return err
	}

	if faqCount == 0 {
		log.Println("‚ùì No se encontraron FAQs, creando preguntas frecuentes...")
		return seedFAQs(db)
	}

	log.Println("‚úÖ FAQs verificadas - OK")
	return nil
}

// checkAndCreateTags verifica y crea tags faltantes
func checkAndCreateTags(db *gorm.DB) error {
	var tagCount int64
	if err := db.Model(&domain.Tag{}).Count(&tagCount).Error; err != nil {
		return err
	}

	if tagCount == 0 {
		log.Println("üè∑Ô∏è  Creando tags MUAC faltantes...")
		return seedTags(db)
	}

	// Verificar si tienen los campos nuevos
	var tagsWithoutMuacCode int64
	db.Model(&domain.Tag{}).Where("muac_code IS NULL OR muac_code = ''").Count(&tagsWithoutMuacCode)

	if tagsWithoutMuacCode > 0 {
		log.Printf("üîß Actualizando %d tags con c√≥digos MUAC...", tagsWithoutMuacCode)
		return updateTagsWithMuacCodes(db)
	}

	log.Println("‚úÖ Tags MUAC verificados - OK")
	return nil
}

// checkAndCreateRecommendations verifica y crea recomendaciones faltantes
func checkAndCreateRecommendations(db *gorm.DB) error {
	var recCount int64
	if err := db.Model(&domain.Recommendation{}).Count(&recCount).Error; err != nil {
		return err
	}

	if recCount == 0 {
		log.Println("üí° Creando recomendaciones nutricionales faltantes...")
		return seedRecommendations(db)
	}

	// Verificar si tienen los campos nuevos
	var recsWithoutMuacCode int64
	db.Model(&domain.Recommendation{}).Where("muac_code IS NULL OR muac_code = ''").Count(&recsWithoutMuacCode)

	if recsWithoutMuacCode > 0 {
		log.Printf("üîß Actualizando %d recomendaciones con c√≥digos MUAC...", recsWithoutMuacCode)
		return updateRecommendationsWithMuacCodes(db)
	}

	log.Println("‚úÖ Recomendaciones verificadas - OK")
	return nil
}

// updateExistingData actualiza datos existentes con campos nuevos
func updateExistingData(db *gorm.DB) error {
	// Activar tags que puedan estar inactivos
	if err := db.Model(&domain.Tag{}).Where("active IS NULL").Update("active", true).Error; err != nil {
		log.Printf("Warning: Error activando tags: %v", err)
	}

	// Activar recomendaciones que puedan estar inactivas
	if err := db.Model(&domain.Recommendation{}).Where("active IS NULL").Update("active", true).Error; err != nil {
		log.Printf("Warning: Error activando recomendaciones: %v", err)
	}

	return nil
}

// updateTagsWithMuacCodes actualiza tags existentes con c√≥digos MUAC
func updateTagsWithMuacCodes(db *gorm.DB) error {
	updates := map[string]map[string]interface{}{
		"MUAC-R1": {
			"muac_code": domain.MuacCodeRed,
			"color":     domain.ColorRed,
			"priority":  domain.PriorityExtreme,
		},
		"MUAC-Y1": {
			"muac_code": domain.MuacCodeYellow,
			"color":     domain.ColorYellow,
			"priority":  domain.PriorityHigh,
		},
		"MUAC-G1": {
			"muac_code": domain.MuacCodeGreen,
			"color":     domain.ColorGreen,
			"priority":  domain.PriorityLow,
		},
		"SEGUIMIENTO": {
			"muac_code": domain.MuacCodeFollow,
			"color":     domain.ColorBlue,
			"priority":  domain.PriorityMedium,
		},
	}

	for name, fields := range updates {
		if err := db.Model(&domain.Tag{}).Where("name = ?", name).Updates(fields).Error; err != nil {
			log.Printf("Warning: Error actualizando tag %s: %v", name, err)
		}
	}

	return nil
}

// updateRecommendationsWithMuacCodes actualiza recomendaciones existentes
func updateRecommendationsWithMuacCodes(db *gorm.DB) error {
	// Buscar recomendaciones por patrones en el nombre
	updates := []struct {
		pattern string
		fields  map[string]interface{}
	}{
		{
			pattern: "%ALERTA ROJA%",
			fields: map[string]interface{}{
				"muac_code":  domain.MuacCodeRed,
				"color_code": domain.ColorRed,
				"priority":   domain.PriorityUrgent,
			},
		},
		{
			pattern: "%ALERTA AMARILLA%",
			fields: map[string]interface{}{
				"muac_code":  domain.MuacCodeYellow,
				"color_code": domain.ColorYellow,
				"priority":   domain.PriorityAttention,
			},
		},
		{
			pattern: "%ZONA VERDE%",
			fields: map[string]interface{}{
				"muac_code":  domain.MuacCodeGreen,
				"color_code": domain.ColorGreen,
				"priority":   domain.PriorityNormal,
			},
		},
		{
			pattern: "%Seguimiento%",
			fields: map[string]interface{}{
				"muac_code":  domain.MuacCodeFollow,
				"color_code": domain.ColorBlue,
				"priority":   domain.PriorityAttention,
			},
		},
	}

	for _, update := range updates {
		if err := db.Model(&domain.Recommendation{}).Where("name LIKE ?", update.pattern).Updates(update.fields).Error; err != nil {
			log.Printf("Warning: Error actualizando recomendaciones con patr√≥n %s: %v", update.pattern, err)
		}
	}

	return nil
}

// ============= FUNCIONES DE LOGGING =============

// logSeedingSummary muestra un resumen de la siembra
func logSeedingSummary(db *gorm.DB) {
	var counts struct {
		Users           int64
		Roles           int64
		Tags            int64
		Recommendations int64
		Patients        int64
		Measurements    int64
		FAQs            int64
	}

	db.Model(&domain.User{}).Count(&counts.Users)
	db.Model(&domain.Role{}).Count(&counts.Roles)
	db.Model(&domain.Tag{}).Count(&counts.Tags)
	db.Model(&domain.Recommendation{}).Count(&counts.Recommendations)
	db.Model(&domain.Patient{}).Count(&counts.Patients)
	db.Model(&domain.Measurement{}).Count(&counts.Measurements)
	db.Model(&domain.FAQ{}).Count(&counts.FAQs)

	log.Println("")
	log.Println("üéâ ============= SISTEMA MUAC INICIALIZADO =============")
	log.Println("üìä Resumen de datos:")
	log.Printf("   üë• Usuarios: %d", counts.Users)
	log.Printf("   üîê Roles: %d", counts.Roles)
	log.Printf("   üè∑Ô∏è  Tags MUAC: %d", counts.Tags)
	log.Printf("   üí° Recomendaciones: %d", counts.Recommendations)
	log.Printf("   ‚ùì Preguntas frecuentes: %d", counts.FAQs)
	log.Printf("   üßí Pacientes: %d", counts.Patients)
	log.Printf("   üìè Mediciones: %d", counts.Measurements)
	log.Println("")
	log.Println("üåç Clasificaci√≥n MUAC seg√∫n est√°ndares OMS/UNICEF/Sphere:")
	log.Printf("   üî¥ MUAC-R1: < %.1f cm  (Desnutrici√≥n Aguda Severa - SAM)", domain.MuacThresholdSevere)
	log.Printf("   üü° MUAC-Y1: %.1f-%.1f cm (Desnutrici√≥n Aguda Moderada - MAM)", domain.MuacThresholdSevere, domain.MuacThresholdModerate)
	log.Printf("   üü¢ MUAC-G1: ‚â• %.1f cm  (Estado Nutricional Adecuado)", domain.MuacThresholdNormal)
	log.Println("   üîµ SEGUIMIENTO: Pacientes en recuperaci√≥n")
	log.Println("")
	log.Println("üîë Credenciales administrador:")
	log.Println("   üìß Email: admin@muac.org")
	log.Println("   üîí Password: admin123")
	log.Println("")
	log.Println("‚úÖ Sistema listo para registro de mediciones con")
	log.Println("   clasificaci√≥n autom√°tica y recomendaciones contextualizadas")
	log.Println("=========================================================")
}

// ============= FUNCIONES DE UTILIDAD =============

// GetSeedingStatus retorna el estado actual de la siembra
func GetSeedingStatus(db *gorm.DB) map[string]interface{} {
	var counts struct {
		Users           int64
		Roles           int64
		Tags            int64
		Recommendations int64
	}

	db.Model(&domain.User{}).Count(&counts.Users)
	db.Model(&domain.Role{}).Count(&counts.Roles)
	db.Model(&domain.Tag{}).Count(&counts.Tags)
	db.Model(&domain.Recommendation{}).Count(&counts.Recommendations)

	return map[string]interface{}{
		"seeded":          counts.Roles > 0,
		"users":           counts.Users,
		"roles":           counts.Roles,
		"tags":            counts.Tags,
		"recommendations": counts.Recommendations,
		"muac_ready":      counts.Tags >= 3 && counts.Recommendations >= 3,
		"has_admin":       counts.Users > 0,
	}
}

// ValidateSeedData valida que los datos sembrados sean correctos
func ValidateSeedData(db *gorm.DB) error {
	// Verificar roles esenciales
	requiredRoles := []string{"ADMINISTRADOR", "SUPERVISOR", "APODERADO"}
	for _, roleName := range requiredRoles {
		var count int64
		if err := db.Model(&domain.Role{}).Where("name = ?", roleName).Count(&count).Error; err != nil {
			return fmt.Errorf("error verificando rol %s: %w", roleName, err)
		}
		if count == 0 {
			return fmt.Errorf("rol requerido '%s' no encontrado", roleName)
		}
	}

	// Verificar tags MUAC esenciales
	requiredTags := []string{domain.MuacCodeRed, domain.MuacCodeYellow, domain.MuacCodeGreen}
	for _, tagCode := range requiredTags {
		var count int64
		if err := db.Model(&domain.Tag{}).Where("muac_code = ?", tagCode).Count(&count).Error; err != nil {
			return fmt.Errorf("error verificando tag %s: %w", tagCode, err)
		}
		if count == 0 {
			return fmt.Errorf("tag MUAC requerido '%s' no encontrado", tagCode)
		}
	}

	// Verificar recomendaciones MUAC esenciales
	for _, muacCode := range requiredTags {
		var count int64
		if err := db.Model(&domain.Recommendation{}).Where("muac_code = ?", muacCode).Count(&count).Error; err != nil {
			return fmt.Errorf("error verificando recomendaci√≥n %s: %w", muacCode, err)
		}
		if count == 0 {
			return fmt.Errorf("recomendaci√≥n MUAC requerida '%s' no encontrada", muacCode)
		}
	}

	// Verificar que existe al menos un admin
	var adminCount int64
	if err := db.Model(&domain.User{}).
		Joins("JOIN roles ON users.role_id = roles.id").
		Where("roles.name = ?", "ADMINISTRADOR").
		Count(&adminCount).Error; err != nil {
		return fmt.Errorf("error verificando usuarios admin: %w", err)
	}
	if adminCount == 0 {
		return fmt.Errorf("no se encontr√≥ ning√∫n usuario administrador")
	}

	return nil
}

// CleanSeedData limpia todos los datos sembrados (√∫til para testing)
func CleanSeedData(db *gorm.DB) error {
	log.Println("üßπ Limpiando datos sembrados...")

	// Orden inverso por dependencias
	tables := []string{
		"measurements",
		"patients",
		"users",
		"recommendations",
		"tags",
		"roles",
	}

	for _, table := range tables {
		if err := db.Exec(fmt.Sprintf("DELETE FROM %s", table)).Error; err != nil {
			log.Printf("Warning: Error limpiando tabla %s: %v", table, err)
		}
	}

	log.Println("‚úÖ Datos limpiados")
	return nil
}
